using System.Runtime.CompilerServices;
using System.Text;
using SimpleExec;
using static Bullseye.Targets;
using static SimpleExec.Command;

Target("default", () =>
    RunAsync("dotnet", "dotnet-releaser build --force dotnet-releaser.toml"));

Target("update-dotnet-tools", () =>
    RunAsync("dotnet", "tool update --all --interactive"));

Target("update-nuget-packages", () =>
    RunAsync("dotnet", "outdated --upgrade"));

Target("output-third-party-licenses", () =>
    RunAsync("dotnet", "nuget-license --input ./UniqueNameGenerator.slnx --output Table --file-output THIRD-PARTY-LICENSES.txt", handleExitCode: _ => true));

Target("update", ["update-dotnet-tools", "update-nuget-packages", "output-third-party-licenses", "default"]);

Target("generate-word-lists", () =>
{
    var wordListsDir = Path.Combine(GetBuildDirectory(), "..", "assets", "word-lists");
    var outputDir = Path.Combine(GetBuildDirectory(), "..", "UniqueNameGenerator", "WordLists");

    foreach (var worldListFile in Directory.EnumerateFiles(wordListsDir, "*.txt"))
    {
        var wordListName = Path.GetFileNameWithoutExtension(worldListFile);
        Console.WriteLine($"Generating word list '{wordListName}'");

        var offset = 0;
        var index = 0;
        var indexList = new StringBuilder("private readonly static (int Offset, int Length)[] _index = [\n");
        var bytesArray = new StringBuilder("private readonly static byte[] _buffer = [\n");

        foreach (var (word, i) in File.ReadAllLines(worldListFile).Select((word, i) => (word.ToLower(), i)))
        {
            var bytes = Encoding.UTF8.GetBytes(word);
            bytesArray.AppendLine($"\t\t{string.Join(", ", bytes.ToArray())}, // {index}: {word}");
            indexList.AppendLine($"\t\t({offset}, {bytes.Length}), // {index}: {word}");
            offset += bytes.Length;
            index += 1;
        }

        bytesArray.AppendLine("\t];");
        indexList.AppendLine("\t];");

        var source =
            $$"""
              //------------------------------------------------------------------------------
              // <auto-generated>
              //     This code was generated by running `build.(cmd|sh) generate-word-lists`
              //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
              // </auto-generated>
              //------------------------------------------------------------------------------

              namespace UniqueNameGenerator;

              public class {{wordListName}}: IWordList {

                  private {{wordListName}}() { }

                  public static readonly {{wordListName}} WordList = new {{wordListName}}();

                  {{bytesArray}}
                  {{indexList}}
                  public string GetWord(Random random) {
                    var (offset, length) = _index[random.Next(0, _index.Length)];
                    return System.Text.Encoding.UTF8.GetString(_buffer, offset, length);
                  }
              };
              """;

        var wordListPath = Path.Combine(outputDir, $"{wordListName}.g.cs");
        File.WriteAllText(wordListPath, source);
    }
});


await RunTargetsAndExitAsync(args, ex => ex is ExitCodeException);

return;

static string GetBuildDirectory([CallerFilePath] string? filename = null) =>
    Path.GetDirectoryName(filename)!;
